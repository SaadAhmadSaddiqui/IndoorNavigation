using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.UI;

/// <summary>
/// Calculates the NavMesh Path and renders a line from the current location to the target location.
/// </summary>
public class NavigationController : MonoBehaviour
{
    // Code written by Saad Ahmad Saddiqui


    public NavMeshAgent agent; // trigger to spawn and despawn AR arrows
    public GameObject trigger; // trigger to spawn and despawn AR arrows
    public List<Transform> destinations; // list of destination positions
    public GameObject person; // person indicator
    //public GameObject cam; // camera indicator
    private NavMeshPath path; // current calculated path
    private LineRenderer line; // linerenderer to display path
    public Transform target; // current chosen destination
    public Dropdown myDropdown; // The dropdown box
    private bool destinationSet; // bool to say if a destination is set

    //create initial path, get linerenderer.
    void Start()
    {
        agent.updateUpAxis = false;
        path = new NavMeshPath();
        line = transform.GetComponent<LineRenderer>();
        destinationSet = false;
        line.material = new Material(Shader.Find("Sprites/Default")) { color = Color.green };
        line.startWidth = 0.2f;
        line.endWidth = 0.2f;
        line.startColor = Color.green;
        line.endColor = Color.green;
        line.transform.position = line.transform.up * -1f;
        Invoke("FillList", 2f);
        //InvokeRepeating("CreateBreadCrumb", 2f, 1f);
    }

    /// <summary>
    /// Fills the destinations list from the rooms generated by the RoomGenerator.
    /// </summary>
    /// <param name="roomsParent">Parent Game Object called "Rooms" to hold all the actual room destinations.</param>
    public void FillList(Transform roomsParent)
    {
        foreach (Transform room in roomsParent)
        {
            destinations.Add(room);
        }
        PopulateDropdown(myDropdown, destinations);
    }

    /// <summary>
    /// Fills up the dropdown list with all the destination options.
    /// </summary>
    /// <param name="dropdown">Reference to the dropdown box.</param>
    /// <param name="optionsArray">Reference to the destinations list.</param>
    void PopulateDropdown(Dropdown dropdown, List<Transform> optionsArray)
    {
        List<string> options = new List<string>();
        options.Add("Choose a destination");
        foreach (var option in optionsArray)
        {
            options.Add(option.name); 
        }
        dropdown.AddOptions(options);
    }

    void Update()
    {
        //if a target is set, calculate and update path
        if (target != null)
        {
            NavMesh.CalculatePath(person.transform.position, target.position, NavMesh.AllAreas, path);
            //lost path due to standing above obstacle (drift)
            if (path.corners.Length == 0)
            {
                Debug.Log("Try moving away from obstacles (optionally recalibrate)");
            }
            line.positionCount = path.corners.Length;
            line.SetPositions(path.corners);
            line.enabled = true;
        }
        else
        {
            line.enabled = false;
        }
    }

    //void CreateBreadCrumb()
    //{
    //    if (target != null)
    //    {
    //        var spawnPose = cam.transform.position + (transform.forward * 1);
    //        //Quaternion rot = cam.transform.rotation;
    //        //Vector3 rotToApply = rot.eulerAngles;
    //        //float rotationToApplyAroundY = rotToApply.y;
    //        //float newCamRotAngleY = Mathf.LerpAngle(Arrow.transform.eulerAngles.y, rotationToApplyAroundY, 2f);
    //        //Quaternion newCamRotYQuat = Quaternion.Euler(0, newCamRotAngleY, 0);
    //        var crumb = Instantiate(trigger, spawnPose, cam.transform.rotation);
    //        //crumb.transform.rotation = newCamRotYQuat;
    //        crumb.GetComponent<BreadcrumbFollow>().target = target;

    //    }
    //}

    /// <summary>
    /// set current destination and create a trigger for showing AR arrows.
    /// </summary>
    /// <param name="index">The index of the chosen destination from the dropdown box (The number coming from the On Value Changed of the dropdown box).</param>
    public void setDestination(int index)
    {
        index -= 1; // To fix the off set caused by th "Choose a destination" option in the dropdown box.
        if (index < 0)
        {
            target = null; // if "Choose a destination" is selected, remove any target.
        }
        else
        {
            target = destinations[index]; // The selected destination minus the "Choose a destination" option.
        }
        
        if (GameObject.Find("NavTrigger(Clone)")) // Destroys older Trigger GO.
        {
            Destroy(GameObject.Find("NavTrigger(Clone)"));
        }
        GameObject.Instantiate(trigger, person.transform.position, person.transform.rotation); // Creates a new Trigger GO.
        Debug.Log("Trigger Created"); //Testing and debugging.
    }
}
